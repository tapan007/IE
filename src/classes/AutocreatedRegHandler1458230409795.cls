//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class AutocreatedRegHandler1458230409795 implements Auth.RegistrationHandler{


    
    // createUser is called when there is no existing user linked 
    // to the incoming third party account
    global  User createUser(Id portalId, Auth.UserData data)
    {
         Http h = new Http();

// Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
    HttpRequest req = new HttpRequest();
    req.setEndpoint('https://www.google.co.in/');
    req.setMethod('GET');

    // Send the request, and return a response
    HttpResponse res = h.send(req);
    system.debug('###res.getBody()'+res.getBody());
        User u;
        Profile p = [SELECT Id FROM profile WHERE name='Customer Community User cloned'];
        // Use incoming email for username, since we're working with a 
        // portal user
        List<User> l = [SELECT Id,UserName,FirstName,LastName,Email FROM User WHERE UserName = :data.email and profileId=:p.id];
        if (l.size() > 0) 
        {
            u = l[0];
            System.debug('Found existing user record for '+ data.firstName + ' ' + data.lastName + ' ' + data.email);
            System.debug(u.FirstName + ' ' + u.LastName + ' ' + u.Email);

            // Update existing record
            u.Email = data.email;
            u.LastName = data.lastName;
            u.FirstName = data.firstName;
            // Useful to save the Facebook ID in a custom field
            u.LinkdIn__c = data.link;

            System.debug('Updating user record for '+ data.firstName + ' ' + data.lastName + ' ' + data.email);
            System.debug(u.FirstName + ' ' + u.LastName + ' ' + u.Email);

            update(u);
        } 
        else 
        {
            // Portal users need an associated contact, which, in turn,
            // needs to be associated with an account.
            // For simplicity, just put all contacts on the sForce account
            Account a = [SELECT Id FROM Account WHERE Name='PSL1'];

            Contact c = new Contact();
            c.AccountId = a.Id;
            c.Email = data.email;
            c.FirstName = data.firstName;
            c.LastName = data.lastName;
            insert(c);

            u = new User();
            //Profile p = [SELECT Id FROM profile WHERE name='Customer Community User'];

            u.UserName = data.email+'.pslcustomer';
            u.Email = data.email;
            u.LastName = data.lastName;
            u.FirstName = data.firstName;
            //u.LinkdIn = data.identifier;
            u.LinkdIn__c = data.link;
            u.Alias = (data.username != null) ? data.username : data.identifier;

            if (u.Alias.length() > 8) 
            {
                u.Alias = u.Alias.substring(0, 8);
            }

            u.Languagelocalekey = UserInfo.getLocale();
            u.Localesidkey = UserInfo.getLocale();
            u.EmailEncodingKey = 'UTF-8';
            u.TimeZoneSidKey = 'America/Los_Angeles';
            u.ProfileId = p.Id;
            u.ContactId = c.Id;

            System.debug('Returning new user record for '+ data.firstName + ' ' + data.lastName + ' ' + data.email);

        }

        return u;
}

global void updateUser(Id userId, Id portalId, Auth.UserData data){
    User u = new User(id=userId);
    //TODO: Customize the username. Must be 80 characters or less.
    //u.username = data.username + '@myorg.com';
    u.email = data.email;
    u.lastName = data.lastName;
    u.firstName = data.firstName;
    u.LinkdIn__c = data.link;
    //String alias = data.username;
    //Alias must be 8 characters or less
    //if(alias.length() > 8) {
        //alias = alias.substring(0, 8);
    //}
    //u.alias = alias;
    Http h = new Http();

// Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
    HttpRequest req = new HttpRequest();
    req.setEndpoint('https://www.google.co.in/');
    req.setMethod('GET');

    // Send the request, and return a response
    HttpResponse res = h.send(req);
    system.debug('###res.getBody()'+res.getBody());
    update(u);
}
}