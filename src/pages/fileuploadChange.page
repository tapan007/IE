<apex:page controller="FileUploadController" docType="html-5.0" sidebar="false" showHeader="false" standardStylesheets="false">
    <script src="../../soap/ajax/28.0/connection.js" type="text/javascript"></script>
    <apex:stylesheet value="{!URLFOR($Resource.datatable,'datatable/bootstrap/css/bootstrap.min.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.jQueryPlugin,  'js/jquery-1.7.1-jquery.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.bootstrap, '/dist/js/bootstrap.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.bootstrap, '/dist/js/bootstrap.js')}"/>
<style> 
    .progress {
        margin-bottom: 0px !important;
    }
    .buttonTD{
        padding-left: 6px;
    }
    .clear{
        clear:both;
    }
    .fileName{
        float: left;
        max-width: 235px;
        overflow: hidden;
        position: absolute;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    .percentComplete{
        float: right;
    }
    .statusBar{
        background: none repeat scroll 0 0 #FFFFFF;
        border: 1px solid #EAEAEA;
        height: 11px;
        padding: 0 2px 0 0;
    }
    .statusBarPercent{
        background-color: #1797C0;
        float: left;
        height: 9px;
        margin: 1px;
        max-width: 100%;
    }
    .statusBarPercentError{
        background-color: #CE0000;
    }
    .upload{
        background-color: white;
        border: 1px solid #CACACA;
        border-radius: 3px 3px 3px 3px;
        margin-top: 6px;
        padding: 4px;
    }
    .uploadBox{
        background-color: #F8F8F8;
        border: 1px solid #EAEAEA;
        border-radius: 4px 4px 4px 4px;
        color: #333333;
        font-size: 12px;
        padding: 6px;
        width: 500px;
    }
    .uploadError{
        border-color: #CE0000;
    }
    .uploadTable{
        margin-left: auto;
        margin-right: auto;
    }
    </style>
     <script>
     
        var parentId='003i000000WQUSO';
     
                var j$ = jQuery.noConflict();
    j$(document).ready(function() {
        //Event listener for click of Upload button
        j$("#uploadButton").click(function(){
            prepareFileUploads();
        });
        
        //Event listener to clear upload details/status bars once upload is complete
        j$("#clear").on('click',function(){
            j$(".upload").remove();
        });
    });
    
    var byteChunkArray; 
    var files;
    var currentFile;
    var $upload;
    var CHUNK_SIZE = 180000; //Must be evenly divisible by 3, if not, data corruption will occur
    var VIEW_URL = '/servlet/servlet.FileDownload?file=';
    //var parentId, you will see this variable used below but it is set in the component as this is a dynamic value passed in by component attribute
    
    //Executes when start Upload button is selected
    function prepareFileUploads(){
        //Get the file(s) from the input field
        
        files = j$('#filesInput').prop("files");
        
        //Only proceed if there are files selected
        if(files.length == 0){
            alert('Please select a file!');
            return; //end function
        }
        
        //Disable inputs and buttons during the upload process
        j$('#uploadButton').addClass('disabled');
                j$('#uploadButton').prop('disabled', true);
      
        //Build out the upload divs for each file selected
        var uploadMarkup = '';
        for(i = 0; i < files.length; i++){
            //Determine file display size
            if(files[i].size < 1000000){
                var displaySize = Math.floor(files[i].size/1000) + 'K';
            }else{
                var displaySize  = Math.round((files[i].size / 1000000)*10)/10 + 'MB';
            }
            
            //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
            uploadMarkup += '<div class="upload" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
            uploadMarkup += '<div class="fileName"><span class="name">'+ files[i].name + '</span> - '+ displaySize+ '</div>';
            uploadMarkup += '<div class="percentComplete">0%</div>'
            uploadMarkup += '<div class="clear"/>';
            uploadMarkup += '<div class="statusBar progress progress-striped active">';
            uploadMarkup += '<div class="statusBarPercent bar"/>';
            uploadMarkup += '</div>';
            uploadMarkup += '</div>';
        }
        
        //Add markup to the upload box
        j$('.uploadBox').append(uploadMarkup);
        
        //Once elements have been added to the page representing the uploads, start the actual upload process
        //checkForUploads();
        //Create a new reader object, part of HTML5 File API
            var reader = new FileReader();
        
        
            //Read the blobChunk as a binary string, reader.onloadend function below is automatically called after this line
            
            //reader.readAsBinaryString(files[0]); //for ie issue this code is get commented
            
            reader.readAsArrayBuffer(files[0]); 
           alert(reader);
            //it is working in ie
            
            
            //Create a reader.onload function, this will execute immediately after reader.readAsBinaryString() function above;
            reader.onloadend = function(evt){ 
                
                if(evt.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                    //Base 64 encode the data for transmission to the server with JS remoting, window.btoa currently on support by some browsers
                    alert('hi');
                    // the code changed by tapan as for ie issue readAsArrayBuffer used to convert it to binary
                    var binary = "";
                    var bytes = new Uint8Array(evt.target.result);
                    var length = bytes.byteLength;
                    
                    for (var i = 0; i < length; i++) 
                    {
                        binary += String.fromCharCode(bytes[i]);
                    }

                    var base64value = window.btoa(binary );
                    j$.ajax({ 
               type: 'post',
               dataType: 'JSONP',
               mimeType: 'text/plain; charset=x-user-defined',
           
           data:base64value ,
           url: "https://cs22.salesforce.com/services/apexrest/Createattachment/",
            beforeSend: function(x) {
                        x.setRequestHeader('Authorization', 'Bearer 00D170000008qwc!ASAAQAUdAZMGEfg6m_g_jJ1cwtrCZW.Rmtu3eDwb1hWWkTY7kWifNfexrn1GDyTZvfR0WYkp5Tu2ALjkWwMfCtf9HWhUoHdV');
             },
           success: function(data){        
             alert(data);
           },
           error:function(data){
           alert(data);
           }
        });
                }
        
    }
    
    function checkForUploads(){
        
        //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
        $upload = j$(".upload:first[data-status='pending']");
        
        if($upload.length != 0){
            //Based on index of the div, get correct file from files array
            currentFile = files[$upload.attr('data-index')];
            
            /*Build the byteChunkArray array for the current file we are processing. This array is formatted as:
            ['0-179999','180000-359999',etc] and represents the chunks of bytes that will be uploaded individually.*/
            byteChunkArray = new Array();  
            
            //First check to see if file size is less than the chunk size, if so first and only chunk is entire size of file
            if(currentFile.size <= CHUNK_SIZE){
                byteChunkArray[0] = '0-' + (currentFile.size - 1);
            }else{
                //Determine how many whole byte chunks make up the file,
                var numOfFullChunks = Math.floor(currentFile.size / CHUNK_SIZE); //i.e. 1.2MB file would be 1000000 / CHUNK_SIZE
                var remainderBytes = currentFile.size % CHUNK_SIZE; // would determine remainder of 1200000 bytes that is not a full chunk
                var startByte = 0;
                var endByte = CHUNK_SIZE - 1;
                
                //Loop through the number of full chunks and build the byteChunkArray array
                for(i = 0; i < numOfFullChunks; i++){
                    byteChunkArray[i] = startByte+'-'+endByte;
                    
                    //Set new start and stop bytes for next iteration of loop
                    startByte = endByte + 1;
                    endByte += CHUNK_SIZE;
                }
                
                //Add the last chunk of remaining bytes to the byteChunkArray
                startByte = currentFile.size - remainderBytes;
                endByte = currentFile.size;
                byteChunkArray.push(startByte+'-'+endByte);
            }
            
            //Start processing the byteChunkArray for the current file, parameter is '' because this is the first chunk being uploaded and there is no attachment Id
            processByteChunkArray('');
               
        }else{
            //All uploads completed, enable the input and buttons
                j$('#uploadButton').removeClass('disabled');
                j$('#uploadButton').prop('disabled', false);
            
            /*Remove the browse input element and replace it, this essentially removes
            the selected files and helps prevent duplicate uploads*/
            j$("#filesInput").replaceWith('<input type="file" name="file" multiple="true" id="filesInput">');
        }
        }
    }
      
     </script>
  
  <div class="uploadBox">
        <table class="uploadTable">
            <tr>
                <td><input type="file" multiple="true" id="filesInput" name="file" /></td>
                <td class="buttonTD">
                    <input id="uploadButton" type="button" title="Upload" class="btn btn-lg" value=" Upload "/>
                    <input id="clear" type="button" title="Clear" class="btn" value=" Clear "/>
                </td>
            </tr>
        </table>
    </div>


  <!-- End Default Content REMOVE THIS -->
</apex:page>